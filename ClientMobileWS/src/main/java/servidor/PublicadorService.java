
package servidor;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Properties;

import javax.xml.namespace.QName;
import jakarta.xml.ws.Service;
import jakarta.xml.ws.WebEndpoint;
import jakarta.xml.ws.WebServiceClient;
import jakarta.xml.ws.WebServiceException;
import jakarta.xml.ws.WebServiceFeature;


/**
 * This class was generated by the XML-WS Tools.
 * XML-WS Tools 4.0.0
 * Generated source version: 3.0
 * 
 */
@WebServiceClient(name = "PublicadorService", targetNamespace = "http://servidor/", wsdlLocation = "http://localhost:13800/publicador?wsdl")
public class PublicadorService
    extends Service
{

    private final static URL PUBLICADORSERVICE_WSDL_LOCATION;
    private final static WebServiceException PUBLICADORSERVICE_EXCEPTION;
    private final static QName PUBLICADORSERVICE_QNAME = new QName("http://servidor/", "PublicadorService");

    static {
    	 URL url = null;
         WebServiceException e = null;
         Properties properties= new Properties();
 		try {
 			String finalmente=System.getProperty("user.home")+File.separator+".turismoUy"+File.separator+".properties";
 			File archivo=new File(finalmente);
 			properties.load(new FileInputStream(archivo));
 			url = new URL(properties.getProperty("urlPublicador")+"?wsdl");
 		} catch (FileNotFoundException e2) {
 			e2.printStackTrace();
 		} catch (IOException e2) {
 			e2.printStackTrace();
 		}
         PUBLICADORSERVICE_WSDL_LOCATION = url;
         PUBLICADORSERVICE_EXCEPTION = e;
    }

    public PublicadorService() {
        super(__getWsdlLocation(), PUBLICADORSERVICE_QNAME);
    }

    public PublicadorService(WebServiceFeature... features) {
        super(__getWsdlLocation(), PUBLICADORSERVICE_QNAME, features);
    }

    public PublicadorService(URL wsdlLocation) {
        super(wsdlLocation, PUBLICADORSERVICE_QNAME);
    }

    public PublicadorService(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, PUBLICADORSERVICE_QNAME, features);
    }

    public PublicadorService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public PublicadorService(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     * 
     * @return
     *     returns Publicador
     */
    @WebEndpoint(name = "PublicadorPort")
    public Publicador getPublicadorPort() {
        return super.getPort(new QName("http://servidor/", "PublicadorPort"), Publicador.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link jakarta.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns Publicador
     */
    @WebEndpoint(name = "PublicadorPort")
    public Publicador getPublicadorPort(WebServiceFeature... features) {
        return super.getPort(new QName("http://servidor/", "PublicadorPort"), Publicador.class, features);
    }

    private static URL __getWsdlLocation() {
        if (PUBLICADORSERVICE_EXCEPTION!= null) {
            throw PUBLICADORSERVICE_EXCEPTION;
        }
        return PUBLICADORSERVICE_WSDL_LOCATION;
    }

}
